
##Google API console
##http://localhost:8080/login/oauth2/code/google
 
spring.security.oauth2.client.registration.google.client-id=sfdfsfdsf
spring.security.oauth2.client.registration.google.client-secret=mysecret

docker container run -d -p 5000:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -d -p 5000:5000 in28min/hello-world-java:0.0.1.RELEASE
docker container run -d -p 5000:5000 in28min/hello-world-python:0.0.1.RELEASE
docker container ls 
docker image ls
docker pull imageName
docker search imageName
docker image history imageid
docker image inspect imageid
docker container stop cc
docker container run -d -p 5001:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -d -p 5002:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container inspect imageid
docker container prune (removes stopped containers)
 
docker --version
docker container ls
docker build -t in28min/hello-world-docker:v1 .
docker image list
docker run -d -p 5000:5000 in28min/hello-world-docker:v1
docker build -t in28min/hello-world-docker:v2 .
docker container run -d -p 5000:5000 in28min/hello-world-docker:v2
docker build -t in28min/hello-world-docker:v3 .
docker container run -d -p 5000:5000 in28min/hello-world-docker:v3
docker build -t in28min/hello-world-docker:v4 .



docker build -t mujahidateeb/springbootstart:v1 .

MySQL docker command:
docker run --detach --env MYSQL_ROOT_PASSWORD=root --env MYSQL_USER=user --env MYSQL_PASSWORD=root --name mysql --publish 2999:3306 mysql:latest
docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=user --env MYSQL_PASSWORD=root --env mysql_native_password=root --env MYSQL_DATABASE=school --name mysql --publish 3306:3306 mysql:8-oracle


docker
https://github.com/in28minutes/master-spring-and-spring-boot/blob/main/83-docker/hello-world-java/README.md

spring-boot:build-image

./mvnw spring-boot:build-image -Dspring-boot.build-image.imageName=springio/gs-spring-boot-docker

*****************docker Compse file************************
filename: docker-compose-05-zipkin.yaml
version: '3.7'

services:

  currency-exchange:
    image: in28min/mmv3-currency-exchange-service:0.0.1-SNAPSHOT
    mem_limit: 700m
    ports:
      - "8000:8000"
    networks:
      - currency-network
    depends_on:
      - naming-server
    environment:
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://naming-server:8761/eureka
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-server:9411/api/v2/spans

  currency-conversion:
    image: in28min/mmv3-currency-conversion-service:0.0.1-SNAPSHOT
    mem_limit: 700m
    ports:
      - "8100:8100"
    networks:
      - currency-network
    depends_on:
      - naming-server
    environment:
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://naming-server:8761/eureka
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-server:9411/api/v2/spans

  api-gateway:
    image: in28min/mmv3-api-gateway:0.0.1-SNAPSHOT
    mem_limit: 700m
    ports:
      - "8765:8765"
    networks:
      - currency-network
    depends_on:
      - naming-server
    environment:
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://naming-server:8761/eureka
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-server:9411/api/v2/spans

  naming-server:
    image: in28min/mmv3-naming-server:0.0.1-SNAPSHOT
    mem_limit: 700m
    ports:
      - "8761:8761"
    networks:
      - currency-network

#docker run -p 9411:9411 openzipkin/zipkin:2.23

  zipkin-server:
    image: openzipkin/zipkin:2.23
    mem_limit: 300m
    ports:
      - "9411:9411"
    networks:
      - currency-network
    restart: always #Restart if there is a problem starting up

networks:
  currency-network:
  
*******Docker Compose file end*******************


******************************AWS*********************************************

IAM for create IAM user
EC2 for create instance
S3 for add buckets for front end
Elastic Beanstalk to add application

sudo su
yum update -y
yum install httpd
systemctl start httpd

Addtional Repos:
https://github.com/in28minutes/spring-microservices-v3/blob/main/04.docker/backup/docker-compose-05-zipkin.yaml
https://github.com/in28minutes/spring-microservices-v3/tree/main/04.docker/01-step-by-step-changes#docker-compose
https://github.com/in28minutes/spring-microservices-v3/blob/main/v3-upgrade.md
